defmodule Identicon do
  @moduledoc """
    A module that converts a string into a deterministic image.
  """

  def main(input) do
    input
    |> hash_input
    |> determine_color
    |> build_grid
    |> filter_odd_squares
    |> build_pixel_map
    |> draw_image
    |> save_image(input)
  end

  @doc """
  Converts a string input into an MD5 hash, returns an integer list representation

  ## Examples
      iex> Identicon.hash_input("bob")
      %Identicon.Image{hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216]}
  """
  def hash_input(input) do
    hex =
      :crypto.hash(:md5, input)
      |> :binary.bin_to_list

    %Identicon.Image{ hex: hex }
  end

  @doc """
  Grabs the first three values of an MD5 hash and stores them as an rgb color

  ## Examples
      iex> Identicon.determine_color(%Identicon.Image{hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216]})
      %Identicon.Image{color: { 159, 157, 81 }, hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216]}
  """
  def determine_color(%Identicon.Image{ hex: [r, g, b | _tail] } = image) do
    %Identicon.Image{ image | color: { r, g, b } }
  end

  @doc """
  Builds a gridspace from the MD5 hash that will become the basis of the identicon image

  ## Examples
      iex> "bob"|>Identicon.hash_input|>Identicon.build_grid
      %Identicon.Image{
        color: nil,
        grid: [{159, 0},{157, 1},{81, 2},{157, 3},{159, 4},{188, 5},{112, 6},{239, 7},{112, 8},{188, 9},{33, 10},{202, 11},{92, 12},{202, 13},{33, 14},{20, 15},{243, 16},{7, 17},{243, 18},{20, 19},{152, 20},{10, 21},{41, 22},{10, 23},{152, 24}],
        hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216],
        pixel_map: nil
      }
  """
  def build_grid(%Identicon.Image{ hex: hex } = image) do
    grid =
      hex
      |> Enum.chunk(3)
      |> Enum.map(&mirror_row/1)
      |> List.flatten
      |> Enum.with_index

    %Identicon.Image{ image | grid: grid }
  end

  @doc """
  Takes a row of a list and ensures vertical symmetry for a list length of 2 or 3

  ## Examples
      iex> Identicon.mirror_row([1, 2, 3])
      [1, 2, 3, 2, 1]

      iex> Identicon.mirror_row([1, 2])
      [1, 2, 2, 1]
  """
  def mirror_row([a, b | _tail] = row) do
    row ++ [b, a]
  end

  @doc """
  Clears squares with an odd value from the grid, resulting in a grid that represents only squares to be colored

  ## Examples
      iex> "bob"|>Identicon.hash_input|>Identicon.build_grid|>Identicon.filter_odd_squares
      %Identicon.Image{
        color: nil,
        grid: [{188, 5},{112, 6},{112, 8},{188, 9},{202, 11},{92, 12},{202, 13},{20, 15},{20, 19},{152, 20},{10, 21},{10, 23},{152, 24}],
        hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216],
        pixel_map: nil
      }

  """
  def filter_odd_squares(%Identicon.Image{ grid: grid } = image) do
    grid = Enum.filter grid, fn({ code, _index }) ->
      rem(code, 2) == 0
    end

    %Identicon.Image{ image | grid: grid }
  end

  @doc """
  Builds a pixel map of the gridspace to represent a 2D arrangement of proper dimensions for colored squares

  ## Examples
      iex> "bob"|>Identicon.hash_input|>Identicon.build_grid|>Identicon.filter_odd_squares|>Identicon.build_pixel_map
      %Identicon.Image{
        color: nil,
        grid: [{188, 5},{112, 6},{112, 8},{188, 9},{202, 11},{92, 12},{202, 13},{20, 15},{20, 19},{152, 20},{10, 21},{10, 23},{152, 24}],
        hex: [159, 157, 81, 188, 112, 239, 33, 202, 92, 20, 243, 7, 152, 10, 41, 216],
        pixel_map: [
          {{0, 50}, {50, 100}},
          {{50, 50}, {100, 100}},
          {{150, 50}, {200, 100}},
          {{200, 50}, {250, 100}},
          {{50, 100}, {100, 150}},
          {{100, 100}, {150, 150}},
          {{150, 100}, {200, 150}},
          {{0, 150}, {50, 200}},
          {{200, 150}, {250, 200}},
          {{0, 200}, {50, 250}},
          {{50, 200}, {100, 250}},
          {{150, 200}, {200, 250}},
          {{200, 200}, {250, 250}} 
        ]
      }
  """
  def build_pixel_map(%Identicon.Image{ grid: grid } = image) do
    pixel_map = Enum.map grid, fn({ _code, index }) ->
      horizontal = rem(index, 5) * 50
      vertical = div(index, 5) * 50
      top_left = { horizontal, vertical }
      bottom_right = { horizontal + 50, vertical + 50 }
      { top_left, bottom_right }
    end

    %Identicon.Image{ image | pixel_map: pixel_map }
  end

  @doc """
  Generates a png image from a provided pixel map and color value

      iex> "bob"|>Identicon.hash_input|>Identicon.determine_color|>Identicon.build_grid|>Identicon.filter_odd_squares|>Identicon.build_pixel_map|>Identicon.draw_image
      <<137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 250, 0,
      0, 0, 250, 8, 2, 0, 0, 0, 7, 142, 205, 106, 0, 0, 6, 130, 73, 68, 65, 84, 120,
      156, 237, 212, 209, 109, 28, 65, 12, 4, 209, 75, 81, 1, 26, 14, 85, 78, 160,
      63, 76, 8, 195, 82, 131, 85, 232, 0, 22, 220, 135, 249, 124, 155, 157, 233,
      67, 127, 128, 217, 94, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148, 220, 237,
      80, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114, 183, 67,
      201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114, 183, 67, 201, 221, 14, 37,
      119, 59, 148, 220, 237, 80, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148, 220,
      237, 80, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114, 183,
      67, 201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114, 183, 67, 201, 221, 14,
      37, 119, 59, 148, 220, 237, 80, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148,
      220, 237, 80, 114, 183, 67, 201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114,
      183, 67, 201, 221, 14, 37, 119, 59, 148, 220, 237, 80, 114, 183, 67, 201, 221,
      14, 37, 119, 59, 148, 220, 237, 80, 159, 191, 127, 190, 220, 255, 143, 254,
      95, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16, 126, 147, 162, 201, 125, 54,
      218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114, 159,
      141, 182, 29, 194, 111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154, 220,
      103, 163, 109, 135, 240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77, 138,
      38, 247, 217, 104, 219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16, 126,
      147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132,
      223, 164, 104, 114, 159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70, 219,
      14, 225, 55, 41, 154, 220, 103, 163, 109, 135, 240, 155, 20, 77, 238, 179,
      209, 182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147, 251,
      108, 180, 237, 16, 126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 209,
      228, 62, 27, 109, 59, 132, 223, 164, 104, 114, 159, 141, 182, 29, 194, 111,
      82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135, 240,
      155, 20, 77, 238, 179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33,
      252, 38, 69, 147, 251, 108, 180, 237, 16, 126, 147, 162, 201, 125, 54, 218,
      118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114, 159, 141,
      182, 29, 194, 111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154, 220, 103,
      163, 109, 135, 240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77, 138, 38,
      247, 217, 104, 219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16, 126, 147,
      162, 201, 125, 54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132, 223,
      164, 104, 114, 159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70, 219, 14,
      225, 55, 41, 154, 220, 103, 163, 109, 135, 240, 155, 20, 77, 238, 179, 209,
      182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147, 251, 108,
      180, 237, 16, 126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 209, 228, 62,
      27, 109, 59, 132, 223, 164, 104, 114, 159, 141, 182, 29, 194, 111, 82, 52,
      185, 207, 70, 219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135, 240, 155,
      20, 77, 238, 179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33, 252,
      38, 69, 147, 251, 108, 180, 237, 16, 126, 147, 162, 201, 221, 29, 218, 135,
      126, 155, 114, 248, 93, 220, 207, 71, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 201, 221, 189, 26, 141, 40, 36,
      119, 247, 106, 52, 162, 144, 220, 221, 171, 209, 136, 66, 114, 119, 175, 70,
      35, 10, 201, 221, 189, 26, 141, 40, 36, 119, 247, 106, 52, 162, 144, 220, 221,
      171, 209, 136, 66, 114, 119, 175, 70, 35, 10, 125, 240, 163, 56, 183, 182,
      223, 203, 157, 126, 8, 236, 71, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 228, 110, 123, 225, 126, 228, 110,
      123, 225, 126, 228, 110, 123, 225, 126, 202, 184, 255, 206, 209, 138, 66, 248,
      77, 138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16,
      126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59,
      132, 223, 164, 104, 114, 159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70,
      219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135, 240, 155, 20, 77, 238,
      179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147,
      251, 108, 180, 237, 16, 126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 
      209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114, 159, 141, 182, 29, 194,
      111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135,
      240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104,
      219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16, 126, 147, 162, 201, 125,
      54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114,
      159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154,
      220, 103, 163, 109, 135, 240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77,
      138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16,
      126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59,
      132, 223, 164, 104, 114, 159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70,
      219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135, 240, 155, 20, 77, 238,
      179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 147,
      251, 108, 180, 237, 16, 126, 147, 162, 201, 125, 54, 218, 118, 8, 191, 73,
      209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114, 159, 141, 182, 29, 194,
      111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154, 220, 103, 163, 109, 135,
      240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77, 138, 38, 247, 217, 104,
      219, 33, 252, 38, 69, 147, 251, 108, 180, 237, 16, 126, 147, 162, 201, 125,
      54, 218, 118, 8, 191, 73, 209, 228, 62, 27, 109, 59, 132, 223, 164, 104, 114,
      159, 141, 182, 29, 194, 111, 82, 52, 185, 207, 70, 219, 14, 225, 55, 41, 154,
      220, 103, 163, 109, 135, 240, 155, 20, 77, 238, 179, 209, 182, 67, 248, 77,
      138, 38, 247, 217, 104, 219, 33, 252, 38, 69, 251, 7, 162, 194, 172, 181, 28,
      108, 222, 135, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130>>
  """
  def draw_image(%Identicon.Image{ color: color, pixel_map: pixel_map }) do
    image = :egd.create(250, 250)
    fill = :egd.color(color)

    Enum.each pixel_map, fn({ top_left, bottom_right }) ->
      :egd.filledRectangle(image, top_left, bottom_right, fill)
    end

    :egd.render(image)
  end

  @doc """
  Saves a png file to the disk given a binary-encoded image and a specified filename.
  """
  def save_image(image, filename) do
    File.write("#{filename}.png", image)
  end
end
